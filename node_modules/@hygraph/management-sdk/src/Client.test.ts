import { Client } from "./Client";

import test from "ava";
import nock from "nock";

test.beforeEach(() => {
  nock.cleanAll();
});

const environmentInfoResponse = {
  data: {
    viewer: {
      projects: [
        {
          id: "123",
          environments: [
            {
              id: "456",
              name: "master",
              endpoint: "https://api-eu-central-1.hygraph.com/v2/foo/master",
            },
          ],
        },
      ],
    },
  },
};

const submitMigrationMutationResponse = (createdAt: Date) => ({
  data: {
    submitBatchChanges: {
      migration: {
        id: "123",
        createdAt,
        finishedAt: null,
        status: "PENDING",
        errors: null,
      },
    }
  },
});

test("dryrun should return list of scheduled migrations", (t) => {
  const client = new Client({
    name: "test",
    authToken: "abc",
    endpoint: "https://api-eu-central-1.hygraph.com/v2/foo/master",
  });

  const change = {
    apiId: "Post",
    apiIdPlural: "Posts",
    displayName: "My Post",
  };
  client.createModel(change);
  const changes = client.dryRun();

  t.deepEqual(changes, [{ operationName: "createModel", params: change }]);
});

test("run should submit the migration when not running with foreground === false", async (t) => {
  const createdAt = new Date();
  const scope = nock("http://localhost:3001")
    .post("/graphql")
    .reply(200, environmentInfoResponse)
    .post("/graphql")
    .reply(200, submitMigrationMutationResponse(createdAt));

  const client = new Client({
    name: "test",
    authToken: "abc",
    endpoint: "https://api-eu-central-1.hygraph.com/v2/foo/master",
  });

  const change = {
    apiId: "Post",
    apiIdPlural: "Posts",
    displayName: "My Post",
  };
  client.createModel(change);
  const result = await client.run(false);

  t.deepEqual(result, {
    createdAt: createdAt.toISOString(),
    errors: null,
    finishedAt: null,
    id: "123",
    status: "PENDING",
  });
  scope.done();
});

test("run should submit the migration when not running with foreground === true", async (t) => {
  const createdAt = new Date();
  const finishedAt = new Date();

  const scope = nock("http://localhost:3001")
    .post("/graphql")
    .reply(200, environmentInfoResponse)
    .post("/graphql")
    .reply(200, submitMigrationMutationResponse)
    .post("/graphql")
    .reply(200, {
      data: {
        viewer: {
          project: {
            environment: {
              migration: {
                id: "123",
                createdAt,
                finishedAt,
                status: "DONE",
                errors: null,
              },
            },
          },
        },
      },
    });

  const client = new Client({
    name: "test",
    authToken: "abc",
    endpoint: "https://api-eu-central-1.hygraph.com/v2/foo/master",
  });

  const change = {
    apiId: "Post",
    apiIdPlural: "Posts",
    displayName: "My Post",
  };
  client.createModel(change);
  const result = await client.run(true);

  t.deepEqual(result, {
    createdAt: createdAt.toISOString(),
    errors: null,
    finishedAt: finishedAt.toISOString(),
    id: "123",
    status: "DONE",
  });
  scope.done();
});

test("run should throw in case an error occurs", async (t) => {
  const client = new Client({
    name: "test",
    authToken: "abc",
    endpoint: "https://api-eu-central-1.hygraph.com/v2/foo/master",
  });

  const change = {
    apiId: "Post",
    apiIdPlural: "Posts",
    displayName: "My Post",
  };
  client.createModel(change);
  const err = await t.throwsAsync(client.run(true));
  t.is(
    err?.message,
    "Could not get endpoint information: request to http://localhost:3001/graphql failed, reason: connect ECONNREFUSED 127.0.0.1:3001"
  );
});

test("should not be possible to run a migration twice", async (t) => {
  const createdAt = new Date();
  const scope = nock("http://localhost:3001")
    .post("/graphql")
    .reply(200, environmentInfoResponse)
    .post("/graphql")
    .reply(200, submitMigrationMutationResponse(createdAt));

  const client = new Client({
    name: "test",
    authToken: "abc",
    endpoint: "https://api-eu-central-1.hygraph.com/v2/foo/master",
  });

  await client.run(false);
  const err = await t.throwsAsync(client.run(false));
  t.is(err?.message, "Migration has already been executed");
  scope.done();
});
