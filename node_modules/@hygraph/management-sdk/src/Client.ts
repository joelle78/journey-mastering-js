import { ClientError, request } from "graphql-request";
import { ManagementAPIClient, MigrationInfo } from "./ManagementAPIClient";
import type { BatchMigrationCreateComponentFieldInput as CreateComponentFieldParams, BatchMigrationCreateComponentInput as CreateComponentParams, BatchMigrationCreateComponentUnionFieldInput as CreateComponentUnionFieldParams, BatchMigrationCreateCustomSidebarElementInput as CreateCustomSidebarElementParams, BatchMigrationCreateEnumerableFieldInput as CreateEnumerableFieldParams, BatchMigrationCreateEnumerationInput as CreateEnumerationParams, BatchMigrationCreateGraphQlRemoteSourceInput as CreateGraphQLRemoteSourceParams, BatchMigrationCreateLocaleInput as CreateLocaleParams, BatchMigrationCreateModelInput as CreateModelParams, BatchMigrationCreateRelationalFieldInput as CreateRelationalFieldParams, BatchMigrationCreateRemoteFieldInput as CreateRemoteFieldParams, BatchMigrationCreateRestRemoteSourceInput as CreateRESTRemoteSourceParams, BatchMigrationCreateSimpleFieldInput as CreateSimpleFieldParams, BatchMigrationCreateStageInput as CreateStageParams, BatchMigrationCreateUnionFieldInput as CreateUnionFieldParams, BatchMigrationCreateWebhookInput as CreateWebhookParams, BatchMigrationDeleteComponentInput as DeleteComponentParams, BatchMigrationDeleteCustomSidebarElementInput as DeleteCustomSidebarElementParams, BatchMigrationDeleteEnumerationInput as DeleteEnumerationParams, BatchMigrationDeleteFieldInput as DeleteFieldParams, BatchMigrationDeleteLocaleInput as DeleteLocaleParams, BatchMigrationDeleteModelInput as DeleteModelParams, BatchMigrationDeleteRemoteSourceInput as DeleteRemoteSourceParams, BatchMigrationDeleteStageInput as DeleteStageParams, BatchMigrationDeleteWebhookInput as DeleteWebhookParams, BatchMigrationRefreshGraphQlRemoteSourceSchemaInput as RefreshGraphQLRemoteSourceSchemaParams, BatchMigrationUpdateAppInstallationInput as UpdateAppInstallationParams, BatchMigrationUpdateComponentFieldInput as UpdateComponentFieldParams, BatchMigrationUpdateComponentInput as UpdateComponentParams, BatchMigrationUpdateComponentUnionFieldInput as UpdateComponentUnionFieldParams, BatchMigrationUpdateEnumerableFieldInput as UpdateEnumerableFieldParams, BatchMigrationUpdateEnumerationInput as UpdateEnumerationParams, BatchMigrationUpdateGraphQlRemoteSourceInput as UpdateGraphQLRemoteSourceParams, BatchMigrationUpdateLocaleInput as UpdateLocaleParams, BatchMigrationUpdateModelInput as UpdateModelParams, BatchMigrationUpdateRelationalFieldInput as UpdateRelationalFieldParams, BatchMigrationUpdateRemoteFieldInput as UpdateRemoteFieldParams, BatchMigrationUpdateRestRemoteSourceInput as UpdateRESTRemoteSourceParams, BatchMigrationUpdateSimpleFieldInput as UpdateSimpleFieldParams, BatchMigrationUpdateStageInput as UpdateStageParams, BatchMigrationUpdateUnionFieldInput as UpdateUnionFieldParams, BatchMigrationUpdateWebhookInput as UpdateWebhookParams, MutationSubmitBatchChangesArgs } from "./mgmtServerTypes";

export class Client {
    private scheduledMigrations: Migrations[];
    private endpoint: string;
    private authToken: string;
    private name?: string;
    private wasExecuted: boolean = false;

    constructor(params: MigrationParams) {
        this.scheduledMigrations = [];
        this.endpoint = params.endpoint;
        this.authToken = params.authToken;
        this.name = params.name;
    }

    /**
     * creates a new model
     * @param data.apiId -  The model apiId 
     * @param data.apiIdPlural -  The models plural apiId. This is used for lists 
     * @param data.displayName -  Display name that is used to render the model in the webapp 
     * @param data.description -  Optional description of the model 
     * @param data.isSystem -  Only AppTokens should provide this flag 
     */
    createModel(data: CreateModelParams) {
        this.scheduledMigrations.push({ operationName: "createModel", params: data });
    }

    /** */
    updateModel(data: UpdateModelParams) {
        this.scheduledMigrations.push({ operationName: "updateModel", params: data });
    }

    /** */
    deleteModel(data: DeleteModelParams) {
        this.scheduledMigrations.push({ operationName: "deleteModel", params: data });
    }

    /** */
    createComponent(data: CreateComponentParams) {
        this.scheduledMigrations.push({ operationName: "createComponent", params: data });
    }

    /** */
    updateComponent(data: UpdateComponentParams) {
        this.scheduledMigrations.push({ operationName: "updateComponent", params: data });
    }

    /** */
    deleteComponent(data: DeleteComponentParams) {
        this.scheduledMigrations.push({ operationName: "deleteComponent", params: data });
    }

    /** */
    createSimpleField(data: CreateSimpleFieldParams) {
        this.scheduledMigrations.push({ operationName: "createSimpleField", params: data });
    }

    /** */
    updateSimpleField(data: UpdateSimpleFieldParams) {
        this.scheduledMigrations.push({ operationName: "updateSimpleField", params: data });
    }

    /** */
    createRemoteField(data: CreateRemoteFieldParams) {
        this.scheduledMigrations.push({ operationName: "createRemoteField", params: data });
    }

    /** */
    updateRemoteField(data: UpdateRemoteFieldParams) {
        this.scheduledMigrations.push({ operationName: "updateRemoteField", params: data });
    }

    /**
     * @param data.isRequired - 
     *    * Marks the field as required.
     *    * Note: This is only supported for RelationFieldType ASSET!
     *    
     */
    createRelationalField(data: CreateRelationalFieldParams) {
        this.scheduledMigrations.push({ operationName: "createRelationalField", params: data });
    }

    /**
     * @param data.isRequired - 
     *    * Marks the field as required.
     *    * Note: This is only supported for RelationFieldType ASSET!
     *    
     */
    updateRelationalField(data: UpdateRelationalFieldParams) {
        this.scheduledMigrations.push({ operationName: "updateRelationalField", params: data });
    }

    /** */
    createUnionField(data: CreateUnionFieldParams) {
        this.scheduledMigrations.push({ operationName: "createUnionField", params: data });
    }

    /** */
    updateUnionField(data: UpdateUnionFieldParams) {
        this.scheduledMigrations.push({ operationName: "updateUnionField", params: data });
    }

    /** */
    createComponentField(data: CreateComponentFieldParams) {
        this.scheduledMigrations.push({ operationName: "createComponentField", params: data });
    }

    /** */
    updateComponentField(data: UpdateComponentFieldParams) {
        this.scheduledMigrations.push({ operationName: "updateComponentField", params: data });
    }

    /** */
    createComponentUnionField(data: CreateComponentUnionFieldParams) {
        this.scheduledMigrations.push({ operationName: "createComponentUnionField", params: data });
    }

    /** */
    updateComponentUnionField(data: UpdateComponentUnionFieldParams) {
        this.scheduledMigrations.push({ operationName: "updateComponentUnionField", params: data });
    }

    /** */
    createEnumerableField(data: CreateEnumerableFieldParams) {
        this.scheduledMigrations.push({ operationName: "createEnumerableField", params: data });
    }

    /** */
    updateEnumerableField(data: UpdateEnumerableFieldParams) {
        this.scheduledMigrations.push({ operationName: "updateEnumerableField", params: data });
    }

    /** */
    deleteField(data: DeleteFieldParams) {
        this.scheduledMigrations.push({ operationName: "deleteField", params: data });
    }

    /**
     * @param data.modelApiId -  Api Id of the model associated with the custom sidebar element 
     * @param data.displayName -  Display name for the sidebar element 
     * @param data.description -  Description name for the sidebar element 
     * @param data.config -  Json metadata associated with the sidebar element 
     * @param data.appElementApiId -  Api Id of the App element to create custom sidebar element with 
     * @param data.appApiId -  Api Id of the App 
     */
    createCustomSidebarElement(data: CreateCustomSidebarElementParams) {
        this.scheduledMigrations.push({ operationName: "createCustomSidebarElement", params: data });
    }

    /**
     * @param data.appApiId -  Api Id of the App 
     * @param data.appElementApiId -  Api Id of the App element associated with the custom sidebar element 
     * @param data.modelApiId -  Api Id of the model associated with the custom sidebar element 
     */
    deleteCustomSidebarElement(data: DeleteCustomSidebarElementParams) {
        this.scheduledMigrations.push({ operationName: "deleteCustomSidebarElement", params: data });
    }

    /** */
    createEnumeration(data: CreateEnumerationParams) {
        this.scheduledMigrations.push({ operationName: "createEnumeration", params: data });
    }

    /** */
    updateEnumeration(data: UpdateEnumerationParams) {
        this.scheduledMigrations.push({ operationName: "updateEnumeration", params: data });
    }

    /** */
    deleteEnumeration(data: DeleteEnumerationParams) {
        this.scheduledMigrations.push({ operationName: "deleteEnumeration", params: data });
    }

    /** */
    createStage(data: CreateStageParams) {
        this.scheduledMigrations.push({ operationName: "createStage", params: data });
    }

    /** */
    deleteStage(data: DeleteStageParams) {
        this.scheduledMigrations.push({ operationName: "deleteStage", params: data });
    }

    /** */
    updateStage(data: UpdateStageParams) {
        this.scheduledMigrations.push({ operationName: "updateStage", params: data });
    }

    /** */
    createLocale(data: CreateLocaleParams) {
        this.scheduledMigrations.push({ operationName: "createLocale", params: data });
    }

    /** */
    deleteLocale(data: DeleteLocaleParams) {
        this.scheduledMigrations.push({ operationName: "deleteLocale", params: data });
    }

    /** */
    updateLocale(data: UpdateLocaleParams) {
        this.scheduledMigrations.push({ operationName: "updateLocale", params: data });
    }

    /**
     * @param data.prefix -  Unique prefix that will be prepended to all of the remote types. This value cannot be changed! 
     * @param data.introspectionUrl - 
     *    * Specific URL that will be used for introspection if the introspection is available on another url than the regular url.
     *    * Can be ignored if the introspection url is the same as the url of the remote source.
     *    
     * @param data.introspectionMethod -  HTTP method that will be used for introspection 
     * @param data.introspectionHeaders -  HTTP headers that will be used for introspection 
     * @param data.remoteTypeDefinitions -  Custom GraphQL input types that can be used as arguments in remote fields that belong to this remoteSource 
     * @param data.oAuth -  Oauth input that can be used to get access token for the remote source 
     */
    createGraphQLRemoteSource(data: CreateGraphQLRemoteSourceParams) {
        this.scheduledMigrations.push({ operationName: "createGraphQLRemoteSource", params: data });
    }

    /** @param data.oAuth -  Oauth input that can be used to get access token for the remote source */
    updateGraphQLRemoteSource(data: UpdateGraphQLRemoteSourceParams) {
        this.scheduledMigrations.push({ operationName: "updateGraphQLRemoteSource", params: data });
    }

    /** */
    refreshGraphQLRemoteSourceSchema(data: RefreshGraphQLRemoteSourceSchemaParams) {
        this.scheduledMigrations.push({ operationName: "refreshGraphQLRemoteSourceSchema", params: data });
    }

    /**
     * @param data.prefix -  Unique prefix that will be prepended to all of the remote types. This value cannot be changed! 
     * @param data.remoteTypeDefinitions -  Remote type definitions that the remote source supports or input types that can be used by any remote field of this remote source 
     * @param data.oAuth -  Oauth input that can be used to get access token for the remote source 
     */
    createRESTRemoteSource(data: CreateRESTRemoteSourceParams) {
        this.scheduledMigrations.push({ operationName: "createRESTRemoteSource", params: data });
    }

    /** @param data.oAuth -  Oauth input that can be used to get access token for the remote source */
    updateRESTRemoteSource(data: UpdateRESTRemoteSourceParams) {
        this.scheduledMigrations.push({ operationName: "updateRESTRemoteSource", params: data });
    }

    /** */
    deleteRemoteSource(data: DeleteRemoteSourceParams) {
        this.scheduledMigrations.push({ operationName: "deleteRemoteSource", params: data });
    }

    /**
     * updates config and status for an AppInstallation, only valid for App Token bearer
     * @param data.config -  App Installation config, the object passed will be merged with the existing config 
     * @param data.status -  App Installation status 
     */
    updateAppInstallation(data: UpdateAppInstallationParams) {
        this.scheduledMigrations.push({ operationName: "updateAppInstallation", params: data });
    }

    /**
     * creates a webhook
     * @param data.models - 
     *    * Pass an empty array for all existing models.
     *    * This will also setup the webhook for models
     *    * created in the future
     *    
     * @param data.stages - 
     *    * Pass an empty array for all existing stages.
     *    * This will also setup the webhook for stages
     *    * created in the future
     *    
     */
    createWebhook(data: CreateWebhookParams) {
        this.scheduledMigrations.push({ operationName: "createWebhook", params: data });
    }

    /** updates a webhook */
    updateWebhook(data: UpdateWebhookParams) {
        this.scheduledMigrations.push({ operationName: "updateWebhook", params: data });
    }

    /** deletes a webhook */
    deleteWebhook(data: DeleteWebhookParams) {
        this.scheduledMigrations.push({ operationName: "deleteWebhook", params: data });
    }

    /** Returns all migrations that would have been sent on submit */
    dryRun(): Migrations[] {
        return this.scheduledMigrations;
    }

    /** Apply custom schema changes, eg. output from `getEnvironmentDiff` method */
    applySchemaChanges(data: Migrations[]) {
        this.scheduledMigrations.push(...data);
    }

    /** Returns the schema difference between the current environment and target environment as migrations */
    async getEnvironmentDiff(targetEnvironment: string): Promise<Migrations[]> {

        const endpoint = new URL(this.endpoint);
        endpoint.hostname = endpoint.hostname.replace("api", "management");
        endpoint.pathname = "graphql";
        let mgmtClientUrl = endpoint.toString();

        try {
          if (process.env.DEBUG) console.log("Checking request to:", mgmtClientUrl);
          await request(mgmtClientUrl, `{ metaInfo { serverVersion } }`);
        } catch (error) {
          if (error instanceof ClientError && error.response.status === 404) {
            mgmtClientUrl = "https://management.hygraph.com/graphql";
            //@ts-ignore
          } else if (error.code === "ENOTFOUND") {
            mgmtClientUrl = "https://management.hygraph.com/graphql";
          } else {
            throw error;
          }
        }

        if (process.env.NODE_ENV === "test") {
          mgmtClientUrl = "http://localhost:3001/graphql";
        }

        if (process.env.MGMT_SERVER_URL !== undefined) {
          mgmtClientUrl = process.env.MGMT_SERVER_URL;
        }

        if (process.env.DEBUG) console.log("Finally, sending request to:", mgmtClientUrl);

        const client = new ManagementAPIClient(
          this.endpoint,
          mgmtClientUrl,
          this.authToken
        );

        let result;
        try {
          result = await client.getEnvironmentDiff(targetEnvironment);
        } catch (e) {
          return Promise.reject(e);
        }

        if (!result) {
          throw new Error(`Could not find diff for the target environment`);
        }

        const migrationResult = result
          .map((m) =>
            Object.keys(m).map((op) => ({ operationName: op, params: m[op] }))
          )
          .flat();

        return migrationResult as Migrations[];
    }

    /**
     * Submits all scheduled migrations to the management server
     * @foreground Wait until the migrations are scheduled and executed. If false the migrations will be submitted, but the result won't be awaited.
     */
    async run(foreground: boolean = true): Promise<MigrationInfo> {

        if (this.wasExecuted) {
          throw new Error("Migration has already been executed");
        }
        const endpoint = new URL(this.endpoint);
        endpoint.hostname = endpoint.hostname.replace("api", "management");
        endpoint.pathname = "graphql";
        let mgmtClientUrl = endpoint.toString();

        try {
          if (process.env.DEBUG) console.log("Checking request to:", mgmtClientUrl);
          await request(mgmtClientUrl, `{ metaInfo { serverVersion } }`);
        } catch (error) {
          if (error instanceof ClientError && error.response.status === 404) {
            mgmtClientUrl = "https://management.hygraph.com/graphql";
            //@ts-ignore
          } else if (error.code === "ENOTFOUND") {
            mgmtClientUrl = "https://management.hygraph.com/graphql";
          } else {
            throw error;
          }
        }

        if (process.env.NODE_ENV === "test") {
          mgmtClientUrl = "http://localhost:3001/graphql";
        }

        if (process.env.MGMT_SERVER_URL !== undefined) {
          mgmtClientUrl = process.env.MGMT_SERVER_URL;
        }

        if (process.env.DEBUG) console.log("Finally, sending request to:", mgmtClientUrl);

        const client = new ManagementAPIClient(
          this.endpoint,
          mgmtClientUrl,
          this.authToken
        );
        let info;
        try {
          info = await client.getEnvironmentInfo();
        } catch (getEnvError) {
          throw getEnvError;
        }

        if (!info) {
          throw new Error(`Could not find environment for endpoint`);
        }

        const variables: MutationSubmitBatchChangesArgs = {
          data: {
            changes: this.scheduledMigrations.map((m) => ({
              [m.operationName]: m.params,
            })),
            name: this.name,
            environmentId: info.environmentId,
          },
        };

        let response;
        try {
          response = await client.submit(variables);
          this.wasExecuted = true;
        } catch (submitError) {
          throw submitError;
        }

        if (!foreground) {
          return response!;
        }
        const status = await client.pollMigrationStatus({
          migrationId: response!.id,
          projectId: info.projectId,
          environmentName: info.environmentName,
        });
        return status;
    }
}

interface MigrationParams {
    name?: string;
    endpoint: string;
    authToken: string;
}

type Migrations = {
    operationName: string;
    params: CreateModelParams |
    UpdateModelParams |
    DeleteModelParams |
    CreateComponentParams |
    UpdateComponentParams |
    DeleteComponentParams |
    CreateSimpleFieldParams |
    UpdateSimpleFieldParams |
    CreateRemoteFieldParams |
    UpdateRemoteFieldParams |
    CreateRelationalFieldParams |
    UpdateRelationalFieldParams |
    CreateUnionFieldParams |
    UpdateUnionFieldParams |
    CreateComponentFieldParams |
    UpdateComponentFieldParams |
    CreateComponentUnionFieldParams |
    UpdateComponentUnionFieldParams |
    CreateEnumerableFieldParams |
    UpdateEnumerableFieldParams |
    DeleteFieldParams |
    CreateCustomSidebarElementParams |
    DeleteCustomSidebarElementParams |
    CreateEnumerationParams |
    UpdateEnumerationParams |
    DeleteEnumerationParams |
    CreateStageParams |
    DeleteStageParams |
    UpdateStageParams |
    CreateLocaleParams |
    DeleteLocaleParams |
    UpdateLocaleParams |
    CreateGraphQLRemoteSourceParams |
    UpdateGraphQLRemoteSourceParams |
    RefreshGraphQLRemoteSourceSchemaParams |
    CreateRESTRemoteSourceParams |
    UpdateRESTRemoteSourceParams |
    DeleteRemoteSourceParams |
    UpdateAppInstallationParams |
    CreateWebhookParams |
    UpdateWebhookParams |
    DeleteWebhookParams
    };
