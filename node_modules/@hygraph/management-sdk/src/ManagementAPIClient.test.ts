import test from "ava";
import nock from "nock";
import { ManagementAPIClient } from "./ManagementAPIClient";

test("should return an error in case the mgmt api returns an error", async (t) => {
  const scope = nock("http://localhost:3001")
    .post("/graphql")
    .replyWithError("something awful happened");

  const client = new ManagementAPIClient(
    "http://localhost:5555/v2/123/master",
    "http://localhost:3001/graphql",
    "myToken"
  );

  await t.throwsAsync(client.getEnvironmentInfo(), {
    instanceOf: Error,
    message:
      "Could not get endpoint information: request to http://localhost:3001/graphql failed, reason: something awful happened",
  });

  scope.done();
});

test("should return the environment id if the contentApiEndpoint exists", async (t) => {
  const scope = nock("http://localhost:3001")
    .post("/graphql")
    .reply(200, {
      data: {
        viewer: {
          projects: [
            {
              id: "123",
              environments: [
                {
                  id: "456",
                  name: "master",
                  endpoint: "http://localhost:5555/v2/123/master",
                },
              ],
            },
          ],
        },
      },
    });

  const client = new ManagementAPIClient(
    "http://localhost:5555/v2/123/master",
    "http://localhost:3001/graphql",
    "myToken"
  );

  await t.notThrowsAsync(
    client.getEnvironmentInfo().then((info) => {
      t.is(info?.environmentId, "456");
      t.is(info?.environmentName, "master");
      t.is(info?.projectId, "123");
    })
  );

  scope.done();
});

test("should return an error if the contentApiEndpoint does not exist", async (t) => {
  const scope = nock("http://localhost:3001")
    .post("/graphql")
    .reply(200, {
      data: {
        viewer: {
          projects: [
            {
              id: "123",
              environments: [
                {
                  id: "456",
                  name: "master",
                  endpoint: "http://localhost:5555/v2/???/master",
                },
              ],
            },
          ],
        },
      },
    });

  const client = new ManagementAPIClient(
    "http://localhost:5555/v2/123/master",
    "http://localhost:3001/graphql",
    "myToken"
  );

  await t.throwsAsync(client.getEnvironmentInfo(), {
    instanceOf: Error,
    message: "Could not find environment",
  });

  scope.done();
});

test("should submit a list of migrations", async (t) => {
  const createdAt = new Date();
  const scope = nock("http://localhost:3001")
    .post("/graphql")
    .reply(200, {
      data: {
        submitBatchChanges: {
          migration: {
            id: "123",
            createdAt,
            finishedAt: null,
            status: "PENDING",
            errors: null,
          },
        },
      },
    });

  const client = new ManagementAPIClient(
    "http://localhost:5555/v2/123/master",
    "http://localhost:3001/graphql",
    "myToken"
  );

  await t.notThrowsAsync(
    client
      .submit({
        data: {
          changes: [
            {
              createModel: {
                apiId: "Post",
                apiIdPlural: "Posts",
                displayName: "Post",
                description: "Classic Post model",
              },
            },
          ],
          environmentId: "123",
          name: "my migration",
        },
      })
      .then((response) => {
        t.deepEqual(response, {
          status: "PENDING",
          id: "123",
          createdAt: createdAt.toISOString(),
          errors: null,
          finishedAt: null,
        });
      })
  );

  scope.done();
});

test("should return an error when the management api call fails on submit", async (t) => {
  const scope = nock("http://localhost:3001")
    .post("/graphql")
    .replyWithError("Something went horrible wrong");

  const client = new ManagementAPIClient(
    "http://localhost:5555/v2/123/master",
    "http://localhost:3001/graphql",
    "myToken"
  );

  await t.throwsAsync(
    client.submit({
      data: {
        changes: [
          {
            createModel: {
              apiId: "Post",
              apiIdPlural: "Posts",
              displayName: "Post",
              description: "Classic Post model",
            },
          },
        ],
        environmentId: "123",
        name: "my migration",
      },
    }),
    {
      instanceOf: Error,
      message:
        "Could not submit migration: request to http://localhost:3001/graphql failed, reason: Something went horrible wrong",
    }
  );

  scope.done();
});

test("should return an error when the management api call fails on getEnvironmentDiff", async (t) => {
  const scope = nock("http://localhost:3001")
    .post("/graphql")
    .reply(200, {
      data: {
        viewer: {
          projects: [
            {
              id: "123",
              environments: [
                {
                  id: "456",
                  name: "master",
                  endpoint: "http://localhost:5555/v2/123/master",
                },
              ],
            },
          ],
        },
      },
    });

  const envDiffNock = nock("http://localhost:3001")
    .post("/graphql", /getEnvironmentDiff/)
    .replyWithError("Something went horrible wrong while getting diff");

  const client = new ManagementAPIClient(
    "http://localhost:5555/v2/123/master",
    "http://localhost:3001/graphql",
    "myToken"
  );

  await t.throwsAsync(client.getEnvironmentDiff("other-env"), {
    instanceOf: Error,
    message:
      "Could not get diff: request to http://localhost:3001/graphql failed, reason: Something went horrible wrong while getting diff",
  });

  scope.done();
  envDiffNock.done();
});

test("should get environment diff", async (t) => {
  const scope = nock("http://localhost:3001")
    .post("/graphql")
    .reply(200, {
      data: {
        viewer: {
          projects: [
            {
              id: "123",
              environments: [
                {
                  id: "456",
                  name: "master",
                  endpoint: "http://localhost:5555/v2/123/master",
                },
              ],
            },
          ],
        },
      },
    });

  const envDiffNock = nock("http://localhost:3001")
    .post("/graphql", /getEnvironmentDiff/)
    .reply(200, {
      data: {
        viewer: {
          project: {
            environment: {
              diff: {
                changes: {
                  createModel: {
                    apiId: "Demo",
                    apiIdPlural: "Demos",
                  },
                },
              },
            },
          },
        },
      },
    });

  const client = new ManagementAPIClient(
    "http://localhost:5555/v2/123/master",
    "http://localhost:3001/graphql",
    "myToken"
  );

  await t.notThrowsAsync(
    client.getEnvironmentDiff("other-env").then((response) => {
      t.like(response, {
        createModel: {
          apiId: "Demo",
          apiIdPlural: "Demos",
        },
      });
    })
  );

  scope.done();
  envDiffNock.done();
});
