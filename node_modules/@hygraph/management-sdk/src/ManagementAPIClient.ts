import {
  MigrationStatus,
  MutationSubmitBatchChangesArgs,
} from "./mgmtServerTypes";
import { GraphQLClient } from "graphql-request";
import { version } from "../package.json";

export type MigrationInfo = {
  id: string;
  createdAt: string;
  finishedAt: string | null;
  status: string;
  errors: string | null;
};

const environmentInfoQuery = `
  {
    viewer {
      ... on TokenViewer {
        project {
          id
          environments {
            id
            name
            endpoint
          }
        }
      }
      
      ... on UserViewer {
        projects {
          id
          environments {
            id
            name
            endpoint
          }
        }
      }
      
      ... on AppTokenViewer {
        project {
          id
          environments {
            id
            name
            endpoint
          }
        }
      }
    }
  }
`;

const environmentDiffQuery = `
  query getEnvironmentDiff($projectId: ID!, $environmentName: String!, $otherEnvironmentName: String!) {
    viewer {
      project(id: $projectId) {
        environment(name: $environmentName) {
          diff(environmentName: $otherEnvironmentName) {
            changes
          }
        }
      }
    }
  }
`;

const submitMutation = `
  mutation submitBatch($data: BatchMigrationInput!) {
    submitBatchChanges(data: $data) {
      migration {
        id
        createdAt
        finishedAt
        status
        errors
      }
    }
  }
`;

const fetchMigrationQuery = `
  query fetchMigration($projectId: ID!, $environmentName: String!, $migrationId: ID!){
    viewer {
      project(id: $projectId) {
        environment(name: $environmentName) {
          migration(id: $migrationId) {
            id
            status
            errors
            createdAt
            finishedAt
          }
        }
      }
    }
  }
`;

export class ManagementAPIClient {
  private client: GraphQLClient;
  constructor(
    private contentApiEndpoint: string,
    mgmtApiEndpoint: string,
    authToken: string
  ) {
    this.client = new GraphQLClient(mgmtApiEndpoint, {
      headers: {
        Authorization: `Bearer ${authToken}`,
        "apollographql-client-name": "management-sdk",
        "apollographql-client-version": version,
      },
    });
  }

  /**
   * Returns the environment info by fetching all envs and filtering those for the given endpoint
   */
  public getEnvironmentInfo = async (): Promise<{
    environmentId: string;
    environmentName: string;
    projectId: string;
  }> => {
    try {
      const response = await this.client.request(environmentInfoQuery, {});
      type Project = {
        id: string;
        environments: {
          id: string;
          name: string;
          endpoint: string;
        }[];
      };

      type Viewer = {
        project?: Project;
        projects?: Project[];
      };

      const { viewer } = response as {
        viewer?: Viewer;
      };

      if (!viewer) {
        return Promise.reject(new Error("Could not find environment"));
      }
      if (viewer.projects) {
        for (const p of viewer.projects) {
          for (const environment of p.environments) {
            if (environment.endpoint === this.contentApiEndpoint) {
              return {
                environmentId: environment.id,
                environmentName: environment.name,
                projectId: p.id,
              };
            }
          }
        }
      } else if (viewer.project) {
        for (const environment of viewer.project.environments) {
          if (environment.endpoint === this.contentApiEndpoint) {
            return {
              environmentId: environment.id,
              environmentName: environment.name,
              projectId: viewer.project.id,
            };
          }
        }
      }
      return Promise.reject(new Error("Could not find environment"));
    } catch (err) {
      if (err instanceof Error) {
        return Promise.reject(
          new Error(`Could not get endpoint information: ${err.message}`)
        );
      } else {
        return Promise.reject(
          new Error(`Unknown error while getting endpoint information:`)
        );
      }
    }
  };

  /**
   * Submits a set of batch changes
   * @param variables
   */
  public submit = async (
    variables: MutationSubmitBatchChangesArgs
  ): Promise<MigrationInfo> => {
    try {
      const response = await this.client.request<{
        submitBatchChanges: { migration: MigrationInfo };
      }>(submitMutation, variables);

      return response.submitBatchChanges.migration;
    } catch (err) {
      if (err instanceof Error) {
        return Promise.reject(
          new Error(`Could not submit migration: ${err.message}`)
        );
      } else {
        return Promise.reject(
          new Error("Unknown error while submitting changes")
        );
      }
    }
  };

  public async pollMigrationStatus(params: {
    projectId: string;
    environmentName: string;
    migrationId: string;
  }): Promise<MigrationInfo> {
    while (true) {
      try {
        await new Promise((resolve) => setTimeout(resolve, 1000));

        const migration = await this.fetchMigration(this.client, {
          projectId: params.projectId,
          environmentName: params.environmentName,
          migrationId: params.migrationId,
        });
        if (
          migration.status !== MigrationStatus.Queued &&
          migration.status !== MigrationStatus.Running
        ) {
          return migration;
        }
      } catch (e) {
        return Promise.reject(e);
      }
    }
  }

  public async getEnvironmentDiff(
    otherEnvironmentName: string
  ): Promise<Record<string, unknown>[]> {
    let info;
    try {
      info = await this.getEnvironmentInfo();
    } catch (e) {
      return Promise.reject(e);
    }

    type Diff = {
      viewer?: {
        project: {
          environment: {
            diff: {
              changes: Record<string, unknown>[];
            };
          };
        };
      };
    };

    try {
      const response = await this.client.request(environmentDiffQuery, {
        projectId: info?.projectId,
        environmentName: info?.environmentName,
        otherEnvironmentName,
      });
      const viewerDiff = response as Diff;

      if (viewerDiff.viewer === undefined) {
        return Promise.reject(new Error("Could not get diff"));
      }

      return viewerDiff?.viewer.project.environment.diff.changes;
    } catch (err) {
      if (err instanceof Error) {
        return Promise.reject(new Error(`Could not get diff: ${err.message}`));
      } else {
        return Promise.reject(new Error("Unknown error while getting diff"));
      }
    }
  }

  private fetchMigration = async (
    client: GraphQLClient,
    args: { projectId: string; migrationId: string; environmentName: string }
  ): Promise<MigrationInfo> => {
    try {
      const res = await client.request(fetchMigrationQuery, {
        migrationId: args.migrationId,
        environmentName: args.environmentName,
        projectId: args.projectId,
      });
      const migration = res?.viewer?.project?.environment?.migration;
      if (!migration) {
        return Promise.reject(
          new Error(`Could not find migration with id '${args.migrationId}'`)
        );
      }
      return migration;
    } catch (e) {
      if (e instanceof Error) {
        return Promise.reject(e);
      } else {
        return Promise.reject(new Error("Unknown error occurred"));
      }
    }
  };
}
